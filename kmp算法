def compute_lps(pattern):#计算前缀后缀长
    m = len(pattern)
    lps=[0]*m
    length = 0
    for i in range(1,m):
        while length > 0 and pattern[i] != pattern[length]:
            length = lps[length-1]# 跳过前⾯已经⽐较过的部分
        if pattern[i] == pattern[length]:
            length+=1
        lps[i] = length
    return lps
def kmp_search(text,pattern):
    n = len(text)
    m = len(pattern)
    if m == 0:
        return 0
    lps = compute_lps(pattern)
    matches = []
    j = 0
    for i in range(n):
        while j>0 and text[i] != pattern[j]:
            j = lps[j-1]
        if text[i] == pattern[j]:
            j+=1
        if j==m:
            matches.append(i-j+1)
            j = lps[j-1]
    return matches
text = "ABABABABCABABABABCABABABABC"
pattern = "ABABCABAB"
index = kmp_search(text, pattern)
print("pos matched：", index)

