def kmp_search(string,patt):
    next = build_next(patt)
    i=0
    j=0
    while i<len(string):
        if string[i] == patt[j]:
            i+=1
            j+=1
        elif j>0:
            j = next[j-1]
        else:
            i+=1
    if j==len(patt):
        return i-j
def build_next(patt):
    next = [0]
    prefix_len = 0
    i = 1
    while i < len(patt):
        if patt[prefix_len] == patt[i]:
            prefix_len += 1
            next.append(prefix_len)
            i+=1
        else:
            if prefix_len == 0:
                next.append(0)
                i+=1
            else:
                prefix_len = next[prefix_len-1]
    return next

















def compute_lps(pattern):#计算前缀后缀长
    m = len(pattern)
    lps=[0]*m
    length = 0
    for i in range(1,m):
        while length > 0 and pattern[i] != pattern[length]:
            length = lps[length-1]# 跳过前⾯已经⽐较过的部分
        if pattern[i] == pattern[length]:
            length+=1
        lps[i] = length
    return lps
def kmp_search(text,pattern):
    n = len(text)
    m = len(pattern)
    if m == 0:
        return 0
    lps = compute_lps(pattern)
    matches = []
    j = 0
    for i in range(n):
        while j>0 and text[i] != pattern[j]:
            j = lps[j-1]
        if text[i] == pattern[j]:
            j+=1
        if j==m:
            matches.append(i-j+1)
            j = lps[j-1]
    return matches
text = "ABABABABCABABABABCABABABABC"
pattern = "ABABCABAB"
index = kmp_search(text, pattern)
print("pos matched：", index)

