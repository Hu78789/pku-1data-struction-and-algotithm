//Kosaraju算法
#include <bits/stdc++.h>
using namespace std;
const int N = 10005;
vector <int> G[N],rG[N];
vector <int> S;//DFS顺序
int vis[N],sccno[N],cnt;
void dfs1(int u){
    if(vis[u]) return;
    vis[u] = 1;
    for(int i=0;i<G[u].size();i++){
        dfs1(G[u][i]);
    }
    S.push_back(u);
}
void dfs2(int u){
    if(sccno[u]) return;
    sccno[u] = cnt;
    for(int i=0;i<rG[u].size();i++) dfs2(rG[u][i]);
}
void Kosaraju(int n){
    cnt = 0;
    S.clear();
    memset(sccno,0,sizeof(sccno));
    memset(vis,0,sizeof(vis));
    for(int i=1;i<=n;i++) dfs1(i);
    for(int i=n-1;i>=0;i--)
        if(!sccno[S[i]]){cnt++;dfs2(S[i]);}
}
int main(){
    int n,m,u,v;
    while(scanf("%d%d",&n,&m),n!=0||m!=0){
        for(int i=0;i<n;i++){G[i].clear();rG[i].clear();}
        for(int i=0;i<m;i++){
            scanf("%d%d",&u,&v);
            G[u].push_back(v);
            rG[v].push_back(u);
        }
        Kosaraju(n);
        printf("%s\n",cnt == 1?"Yes":"No");
    }
    return 0;
}
#python版
#迷宫城堡Kosaraju
def dfs1(graph,node,visited,stack):
    visited[node] = True
    for nbr in graph[node]:
        if not visited[nbr]:
            dfs1(graph,nbr,visited,stack)
    stack.append(node)
def dfs2(graph,node,visited,component):
    visited[node] = True
    component.append(node)
    for nbr in graph[node]:
        if not visited[nbr]:
            dfs2(graph,nbr,visited,component)
def kosaraju(graph,n):
    stack = []
    visited = [False]*(n+1)
    for node in graph.keys():
        if not visited[node]:
            dfs1(graph, node, visited, stack)
    rG = {i:[] for i in range(1,n+1)}
    for node in range(1,len(graph)+1):
        for nbr in graph[node]:
            rG[nbr].append(node)
    visited = [False]*(n+1)
    sccs = []
    while stack:
        node = stack.pop()
        if not visited[node]:
            scc = []
            dfs2(rG,node,visited,scc)
            sccs.append(scc)
    return sccs
def main(n,m):
    graph = {i:[] for i in range(1,n+1)}
    for _ in range(m):
        a,b = map(int,input().split())
        graph[a].append(b)
    sccs = kosaraju(graph,n)
    if len(sccs) == 1:
        print("Yes")
    else:
        print("No")

while True:
    n,m = map(int,input().split())
    if n==0 and m==0:
        break
    main(n,m)
#Tarjan算法
def Tarjan(graph):
    def dfs(node):
        nonlocal index,stack,indices,low_link,on_stack,sccs
        index+=1
        indices[node] = index
        low_link[node] = index
        stack.append(node)
        on_stack[node] = True
        for nbr in graph[node]:
            if indices[nbr] == 0:# Neighbor not visited yet
                dfs(nbr)
                low_link[node] = min(low_link[node],low_link[nbr])
            elif on_stack[nbr]:# Neighbor is in the current SCC
                low_link[node] = min(low_link[node], indices[nbr])
        if indices[node] == low_link[node]:
            scc = []
            while True:
                top = stack.pop()
                on_stack[top] = False
                scc.append(top)
                if top == node:
                    break
            sccs.append(scc)

    index = 0
    stack = []
    indices = [0]*(len(graph)+1)#次序
    low_link = [0]*(len(graph)+1)
    on_stack = [False]*(len(graph)+1)
    sccs = []
    for node in range(1,len(graph)+1):
        if indices[node] == 0:
            dfs(node)
    return sccs
def main(n,m):
    graph = {i:[] for i in range(1,n+1)}
    for _ in range(m):
        a,b = map(int,input().split())
        graph[a].append(b)
    sccs = Tarjan(graph)
    if len(sccs) == 1:
        print("Yes")
    else:
        print("No")

while True:
    n,m = map(int,input().split())
    if n==0 and m==0:
        break
    main(n,m)
//c++
#include <bits/stdc++.h>
using namespace std;
const int N = 10005;
int cnt;
int low[N],num[N],dfn;
int sccno[N],stack1[N],top;
vector <int> G[N];
void dfs(int u){
   
    stack1[top++] = u;
    low[u] = num[u] = ++dfn;
    for(int i=0;i<G[u].size();++i){
        int v = G[u][i];
        if(!num[v]){
            dfs(v);
            low[u] = min(low[u],low[v]);
        }
        else if(!sccno[v])
            low[u] = min(low[u],num[v]);        
    }
    if(low[u] == num[u]){
        cnt++;
        while (1)
        {
            int v = stack1[--top];
            sccno[v] = cnt;
            if(u==v) break;
        }
        
    }
}
void Tarjan(int n){
    cnt = top = dfn = 0;
    memset(sccno,0,sizeof(sccno));
    memset(num,0,sizeof(num));
    memset(low,0,sizeof(low));
    for(int i=1;i<=n;i++){
        if(!num[i])
            dfs(i);
    }
}
int main(){
    int n,m,u,v;
    while(scanf("%d%d",&n,&m),n!=0||m!=0){
        for(int i=0;i<=n;i++){G[i].clear();}
        for(int i=0;i<m;i++){
            scanf("%d%d",&u,&v);
            G[u].push_back(v);
            
        }
        Tarjan(n);
        printf("%s\n",cnt == 1?"Yes":"No");
    }
    return 0;
}
