from collections import defaultdict
def dfs(node,color):
    color[node] = 1
    for neighbor in graph[node]:
        if color[neighbor] == 1:
            return True
        elif color[neighbor] == 0 and dfs(neighbor,color):
            return True
    color[node] = 2
    return False

T = int(input())
for _ in range(T):
    n,m = map(int,input().split())
    graph = defaultdict(list)
    for _ in range(m):
        x,y = map(int,input().split())
        graph[x].append(y)
    color=[0]*(n+1)
    is_cyclic = False
    for node in range(1,n+1):
        if color[node] == 0:
            if dfs(node,color):
                is_cyclic = True
                break
    print("Yes" if is_cyclic else "No")
