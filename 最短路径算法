//Dijskra算法
#include <iostream>
using namespace std;
#include <bits/stdc++.h>
const long long INF = 0x3f3f3f3f3f3f3f3fLL;
const int N = 3e5 + 2;
struct edge{
  int from,to;
  long long w;
  edge(int a,int b,long long c){from = a;to=b;w=c;}
};
vector <edge> e[N];//存图e->E
struct node{
    int id; long long n_dis;
    node(int b,long long c){id = b;n_dis=c;}
    bool operator < (const node &a) const{return n_dis > a.n_dis;}
};
int n,m;
int pre[N];
//print s-->t path
void print_path(int s,int t){
    if(s==t){printf("%d",s);return;}
    print_path(s,pre[t]);
    printf("%d",t);
}
long long dis[N];
bool done[N];
void dijkstra(){
    int s=1;
    //初始化
    for (int i=1;i<=n;i++){
        dis[i] = INF; done[i] = false;
    }
    dis[s] = 0;
    priority_queue<node>Q;
    Q.push(node(s,dis[s]));
    while (!Q.empty()){
        node u = Q.top();
        Q.pop();
        if(done[u.id]) continue;
        done[u.id] = true;
        for(int i=0;i<e[u.id].size();i++){
            edge y = e[u.id][i];
            if (done[y.to]) continue;
            if (dis[y.to]>y.w+u.n_dis){
                dis[y.to] = y.w + u.n_dis;
                Q.push(node(y.to,dis[y.to]));
                pre[y.to] = u.id;
            }

        }
    }

}

int main()
{
  scanf("%d%d",&n,&m);
  for(int i=1;i<=n;i++) e[i].clear();
  while(m--){
    int u,v,w; cin>>u>>v>>w;
    e[u].push_back(edge(u,v,w));
    }
  dijkstra();
  for(int i=1;i<=n;i++){
    if(dis[i]>=INF) cout<<"-1 ";
    else printf("%lld ",dis[i]);
  }  

  return 0;
}
//kruskal算法
#include <bits/stdc++.h>
using namespace std;
int n,m;
const int N = 5005,M = 2e5+5;
struct edge{
    int from;
    int to;
    int w;
    edge(int a,int b,int c){from=a;to=b;w=c;}
    edge(){}
}edges[M];
bool cmp(edge a,edge b){return a.w < b.w;}//从小到大排序
int s[N];//Disjoint_set
int find_set(int x){
  if(x!=s[x]){
      //t = s[x];
      s[x] = find_set(s[x]);
    }
    return s[x];
}

void kruskal(){
    sort(edges+1,edges+m+1,cmp);
    for (int i=1;i<=n;i++) s[i] = i;
    int ans=0,cnt=0;
    for(int i=1;i<=m;i++){
      if(cnt==n-1) break;
      int e1 = find_set(edges[i].from);
      int e2 = find_set(edges[i].to);
      if (e1==e2) continue;
      else{
        ans+=edges[i].w;
        s[e1] = e2;
        cnt++;
        cout<<cnt;
        cout<<edges[i].from<<edges[i].to;
        
      }

    }
    if (cnt==n-1) cout<<ans;
    else cout<<"orz";
}
int main(){
    cin>>n>>m;
    for(int i=1;i<=m;i++) cin>>edges[i].from>>edges[i].to>>edges[i].w;
    kruskal();
    return 0;
}
//prim
#include <bits/stdc++.h>
using namespace std;
const int N = 5005,M = 2e5+5;
struct edge{
  int start,to,w;
  edge(int b,int w){to=b,w=w;}
};
vector <edge> G[M];//索引表起点
struct node{
  int id,dis;
  node(int a,int b){id=a,dis=b;}
  bool operator<(const node &u) const {return dis>u.dis;}
};
int n,m;
bool done[N];
void prim(){
  int s=1;
  for(int i=1;i<=N;i++) done[i] = false;
  priority_queue<node>q;
  q.push(node(s,0));
  int ans = 0,cnt=0;
  while(!q.empty()){
    node u = q.top();
    q.pop();
    if(done[u.id]) continue;
    done[u.id] = true;
    cnt+=1;
    ans+=u.dis;
    for(int i=0;i<G[u.id].size();i++){
      edge y = G[u.id][i];
      if(done[y.to]) continue;
      q.push(node(y.to,y.w));

    }

  } 
  if (cnt == n) cout<<ans;
  else cout<<"orz";
}
int main(){
  cin>>n>>m;
  for(int i=1;i<=m;i++){
    int a,b,c; cin>>a>>b>>c;
    G[a].push_back(edge(b,c)); G[b].push_back(edge(a,c));
  }
  prim();
  return 0;
}

